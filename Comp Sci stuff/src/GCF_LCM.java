/******************************************************************** *  *  Class: GCF_LCM * Author: <your name> *   Date: <the date> *    *   This class creates a GUI window which allows the user to input *   two integers and find the greatest common factor and the least  *   common multiple of those numbers. *    *   Date		Word Done *   9/8/13		GUI framework was created, with needed components *    ********************************************************************/import java.awt.*;import java.util.ArrayList;import BreezyGUI.*;public class GCF_LCM extends GBFrame {   	//The labels: these display the text strings that guide the user.    	private Label firstLabel;    	private Label secondLabel;   	   	//The integer fields: these are used for the input and output of    	//integer values.  	private IntegerField firstField;    	private IntegerField secondField;    	//The command buttons: these trigger the buttonClicked method when   	//clicked.   	private Button gcfButton; 	private Button lcmButton; 	private Button clearButton; 	private Button primesButton; 	private Button factorsButton; 	private Button fibonacciButton; 	 	// A text area to output the answers.  You can put text into a TextArea  	// either by using area.setText(somestring) which replaces all of the text 	// with the new text, or area.append(somestring) which adds the new string 	// to the text already present in the text area 	  	private TextArea outputArea; 	    /**     * This is the constructor for the GCF_LCM class. It constructs the needed     * buttons, labels, fields and text area. Those two labels, two fields,      * three buttons and the text area are the instance variables for the class.     * The purpose of the contructor is to construct each of those instance     * variables so that the GUI frame works.     */   	public GCF_LCM( )   	{   		firstLabel = addLabel("first number",1,1,1,1);   		secondLabel = addLabel("second number",2,1,1,1);   		   		firstField = addIntegerField(0,1,2,1,1);   		secondField = addIntegerField(0,2,2,1,1);   		   		gcfButton = addButton("GCF",3,1,1,1);   		lcmButton = addButton("LCM",3,2,1,1);   		clearButton = addButton("Clear",3,3,1,1);  		   		outputArea = addTextArea("",4,1,5,5);   		primesButton = addButton("Primes Between",3,4,1,1);   		factorsButton = addButton("Factors",3,5,1,1);   		fibonacciButton = addButton("Fibonacci",3,6,1,1);   	}      	/**   	 * This method is called every time one of the buttons in our    	 * GUI frame is clicked. The specific button being clicked is    	 * passed to the method as the object "buttonObj."   	 */   	public void buttonClicked (Button buttonObj)   	{      	// get the values in each of the fields      	int firstNumber = firstField.getNumber();      	int secondNumber = secondField.getNumber();      	int answer = 1;      		     	// now figure out which button was clicked     	if(buttonObj == clearButton)      	{      		firstField.setNumber(0);      		secondField.setNumber(0);      		outputArea.setText("");      	}      	else if (buttonObj == gcfButton)      	{        		// Put code here to correctly find the greatest common factor of      		// the two numbers input by the user      		      		outputArea.append("The greatest common factor of " + firstNumber +      				          " and " + secondNumber + " is " + gcf(firstNumber, secondNumber) + "\n");      	}      	else if (buttonObj == lcmButton)      	{      		// Put code here to correctly find the least common multiple of      		// the two numbers input by the user      		outputArea.append("The least common multiple of " + firstNumber +			          		  " and " + secondNumber + " is " + lcm(firstNumber, secondNumber) +"\n");      	}	      	else if (buttonObj == primesButton)      	{      		// Put code here to correctly find the primes between of      		// the two numbers input by the user      		outputArea.append("The primes between " + firstNumber +			          		  " and " + secondNumber + " are " + primesBetween(firstNumber, secondNumber) +"\n");      	}	      	else if (buttonObj == factorsButton)      	{      		// Put code here to correctly find the factors of      		// the first number inputted by the user      		dispFactors(firstNumber);      		      	}	      	else if (buttonObj == fibonacciButton)      	{      		// Put code here to correctly display the first n fibonacci numbers      		dispFibonacci(firstNumber);      	}	   	}   	   	public void dispFibonacci(int a)   	{   		outputArea.append("1 ");   		int b = 0;   		int c = 1;   		for(int i = 1; i < a; i++)   		{   			if(0 == i % 10)   			{   				outputArea.append("\n");   			}   			c = b + c;   			b = c - b;   			outputArea.append(c + " ");   		}   		outputArea.append("\n");   	}   	   	public void dispFactors(int a)   	{	   		outputArea.append(a + ": 1");   		   		for(int i = 2; i <= a; i++)   		{   			if(0 == a % i)   			{	   				outputArea.append(", " + i);   			}   		}   		   		outputArea.append("\n");   		   	}   	   	public ArrayList primesBetween(int a, int b)   	{   		ArrayList primesList = new ArrayList();   		   		for(int i = Math.min(a, b); i <= Math.max(a, b); i++)   		{   			if(isPrime(i))   			{	   				primesList.add(i);   			}   		}   		   		return primesList;   	}   	   	public boolean isPrime(int a)   	{   		if( a < 2)   		{   			return false;   		}   		   		if( a == 2)   		{   			return true;   		}   		   		if(0 == a % 2)   		{   			return false;   		}   		   		for(int c = 3; c < Math.sqrt(a); c+=2)   		{   			if(0 == a % c)   			{   				return false;   			}   		}   		   		return true;   	}   	   	public int gcf(int a, int b)   	{   		   		if(a < 0 || b < 0)   		{   			return -1;   		}   		  		for(int n = Math.min(a, b); n > 1; n--)  		{  			if(a % n == 0 && b % n == 0)  			{  				return n;  			}  		}  		  		return 1;   	}   	   	public int lcm(int a, int b){   		   		if(a < 0 || b < 0)   		{   			return -1;   		}  		  		for(int n = 1; n < Math.min(a, b); n++)  		{  			if( 0 == Math.max(a, b) * n % (Math.min(a, b) )) //if bigger*n is divisible by smaller  			{  				return Math.max(a, b) * n; //return bigger*n  			}  		}  		  		return a * b;   	}   	   	public static void main (String[] args)	{		//Instantiate the GUI part		Frame frm = new GCF_LCM();    		//Set the application's window width and height in pixels		frm.setSize (580, 440);  		//Make the window visible to the user		frm.setVisible (true);           	}      	 }